from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import handlers.keyboards as kb
from dispatcher import BotDB

from .report import extract_value, prepare_report_message

CATEGORIES = ['food', 'auto', 'relax', 'Stepa',
              'education', 'flat', 'style', 'health']


class ExpencesStatesGroup(StatesGroup):
    category = State()
    expense = State()


# @dp.message_handler(commands='add_expence')
async def add_expence(message: types.Message):
    user_exists, no_tables = BotDB.user_exists(message.from_user.id)
    if no_tables:
        await message.answer("–ë–æ—Ç –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.üõ†",
                             reply_markup=kb.get_menu_kb())
    elif not user_exists:
        await message.answer("–í—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.ü§∑‚Äç‚ôÄÔ∏è")
    else:
        await message.answer(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∑–∞—Ç—Ä–∞—Ç—ã —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º,\n"
            + "–Ω–∞–ø—Ä–∏–º–µ—Ä '500 –∫–æ—Ñ–µ –∏ —Å—ç–Ω–¥–≤–∏—á–∏'",
            reply_markup=kb.get_expenses_kb()
        )
        await ExpencesStatesGroup.category.set()
        # —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await message.delete()


# @dp.callback_query_handler(text=CATEGORIES,
#                            state=ExpencesStatesGroup.category)
async def load_category(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(category=call.data)
    await ExpencesStatesGroup.expense.set()
    # —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç


# @dp.message_handler(state=ExpencesStatesGroup.expense)
async def load_expense(message: types.Message, state: FSMContext):
    await state.update_data(expense=message.text)
    data = await state.get_data()
    category = data['category']
    value, comment = extract_value(message.text)
    if value:
        BotDB.add_record(message.from_user.id, category, value, comment)
        report_message = prepare_report_message()
        await message.reply(
            f'üëå–ó–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–Ω–µ—Å–µ–Ω–∞!\n{report_message}',
            reply_markup=kb.get_menu_kb()
        )
        await state.finish()
    else:
        await message.reply(
            'ü§ì–û—à–∏–±–∫–∞ –≤ —Å—É–º–º–µ –∑–∞—Ç—Ä–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ.'
        )


def register_handlers_expences(dp: Dispatcher):
    dp.register_message_handler(add_expence, commands='add_expence')
    dp.register_callback_query_handler(load_category, text=CATEGORIES,
                                       state=ExpencesStatesGroup.category)
    dp.register_message_handler(load_expense,
                                state=ExpencesStatesGroup.expense)
