from aiogram import types
from aiogram.types import (ReplyKeyboardMarkup,
                           KeyboardButton,
                           InlineKeyboardMarkup,
                           InlineKeyboardButton)
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from dispatcher import dp
import re
from bot import BotDB

MONTHLY_EXPENCES = 600

button1 = KeyboardButton('/add_expence')
button2 = KeyboardButton('/report')
keyboard_start = ReplyKeyboardMarkup(resize_keyboard=True,
                                     one_time_keyboard=True)
keyboard_start.add(button1).add(button2)

button3 = InlineKeyboardButton(text='üçΩfood', callback_data='food')
button4 = InlineKeyboardButton(text='üöôauto', callback_data='auto')
button5 = InlineKeyboardButton(text='üèïtravel', callback_data='travel')
button6 = InlineKeyboardButton(text='ü§π‚Äç‚ôÇÔ∏èStepa', callback_data='Stepa')
button7 = InlineKeyboardButton(text='üéìknow-how', callback_data='know-how')
button8 = InlineKeyboardButton(text='üè†flat', callback_data='flat')
button9 = InlineKeyboardButton(text='üëòstyle', callback_data='style')
button10 = InlineKeyboardButton(text='üîô/menu', callback_data='/menu')

keyboard_exp = InlineKeyboardMarkup(resize_keyboard=True,
                                    one_time_keyboard=True)
keyboard_exp.row(button3, button4, button5, button6)
keyboard_exp.row(button7, button8, button9)
keyboard_exp.add(button10)

CATEGORIES = ['food', 'auto', 'travel', 'Stepa', 'know-how', 'flat', 'style']


class ExpencesStatesGroup(StatesGroup):
    category = State()
    expense = State()


@dp.message_handler(commands='start')
async def start(message: types.Message):
    if not BotDB.user_exists(message.from_user.id):
        await message.bot.send_message(message.from_user.id, "–í–∞—Å –Ω–µ –∑–≤–∞–ª–∏!")

    await message.bot.send_message(
        message.from_user.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        + "/add_expence - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã\n"
        + "/report - —É–≤–∏–¥–µ—Ç—å –æ—Ç—á–µ—Ç",
        reply_markup=keyboard_start
    )


@dp.message_handler(commands='menu')
async def menu(message: types.Message):
    await message.bot.send_message(
        message.from_user.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        + "/add_expence - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã\n"
        + "/report - —É–≤–∏–¥–µ—Ç—å –æ—Ç—á–µ—Ç",
        reply_markup=keyboard_start
    )


@dp.message_handler(commands='add_expence')
async def add_expence(message: types.Message):
    await message.bot.send_message(
        message.from_user.id,
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard_exp
    )
    await ExpencesStatesGroup.category.set()     # —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏


@dp.callback_query_handler(text=CATEGORIES, state=ExpencesStatesGroup.category)
async def load_category(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'menu':
        await state.finish()

    await state.update_data(category=call.data)
    await ExpencesStatesGroup.expense.set()    # —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç –∑–∞—Ç—Ä–∞—Ç


@dp.message_handler(state=ExpencesStatesGroup.expense)
async def load_expense(message: types.Message, state: FSMContext):
    await state.update_data(expense=message.text)
    data = await state.get_data()
    category = data['category']
    value, comment = extract_value(message.text)
    if value:
        BotDB.add_record(message.from_user.id, category, value, comment)
        left = MONTHLY_EXPENCES - BotDB.get_records()[0]
        await message.bot.send_message(
            message.from_user.id,
            f'–ó–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–Ω–µ—Å–µ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å {left}.'
        )
        await state.finish()
    else:
        await message.bot.send_message(
            message.from_user.id,
            '–û—à–∏–±–∫–∞ –≤ —Å—É–º–º–µ –∑–∞—Ç—Ä–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ.'
        )


def extract_value(expense: str):
    exp_split = expense.split()
    value = re.findall(r"\d+(?:.\d+)?", exp_split[0])
    if len(value):
        value = float(value[0].replace(',', '.'))
    else:
        value = None
    comment = ' '.join(exp_split[1:])
    return value, comment


@dp.message_handler(commands='report')
async def report(message: types.Message):
    left = MONTHLY_EXPENCES - BotDB.get_records()[0]
    await message.reply(f'–û—Å—Ç–∞–ª–æ—Å—å {left}!')
